base::The base element allows authors to specify the document base URL for the purposes of parsing URLs, and the name of the default browsing context for the purposes of following hyperlinks. The element does not represent any content beyond this information.\n\nThere must be no more than one base element per document.\n\nA base element must have either an href attribute, a target attribute, or both.\n\nThe href content attribute, if specified, must contain a valid URL potentially surrounded by spaces.\n\nA base element, if it has an href attribute, must come before any other elements in the tree that have attributes defined as taking URLs, except the html element (its manifest attribute isn't affected by base elements).
body::The body element represents the contents of the document.\n\nIn conforming documents, there is only one body element. The document.body IDL attribute provides scripts with easy access to a document's body element.\n\nSome DOM operations (for example, parts of the drag and drop model) are defined in terms of "the body element". This refers to a particular element in the DOM, as per the definition of the term, and not any arbitrary body element.\n\nThe body element exposes as event handler content attributes a number of the event handlers of the Window object. It also mirrors their event handler IDL attributes.\n\nThe event handlers of the Window object named by the Window-reflecting body element event handler set, exposed on the body element, replace the generic event handlers with the same names normally supported by HTML elements.
div::The div element has no special meaning at all. It represents its children. It can be used with the class, lang, and title attributes to mark up semantics common to a group of consecutive elements. It can also be used in a dl element, wrapping groups of dt and dd elements.\n\nAuthors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors.
h1::These elements represent headings for their sections.\n\nThe semantics and meaning of these elements are defined in the section on headings and sections.\n\nThese elements have a rank given by the number in their name. The h1 element is said to have the highest rank, the h6 element has the lowest rank, and two elements with the same name have equal rank.
h2::These elements represent headings for their sections.\n\nThe semantics and meaning of these elements are defined in the section on headings and sections.\n\nThese elements have a rank given by the number in their name. The h1 element is said to have the highest rank, the h6 element has the lowest rank, and two elements with the same name have equal rank.
h3::These elements represent headings for their sections.\n\nThe semantics and meaning of these elements are defined in the section on headings and sections.\n\nThese elements have a rank given by the number in their name. The h1 element is said to have the highest rank, the h6 element has the lowest rank, and two elements with the same name have equal rank.
h4::These elements represent headings for their sections.\n\nThe semantics and meaning of these elements are defined in the section on headings and sections.\n\nThese elements have a rank given by the number in their name. The h1 element is said to have the highest rank, the h6 element has the lowest rank, and two elements with the same name have equal rank.
h5::These elements represent headings for their sections.\n\nThe semantics and meaning of these elements are defined in the section on headings and sections.\n\nThese elements have a rank given by the number in their name. The h1 element is said to have the highest rank, the h6 element has the lowest rank, and two elements with the same name have equal rank.
h6::These elements represent headings for their sections.\n\nThe semantics and meaning of these elements are defined in the section on headings and sections.\n\nThese elements have a rank given by the number in their name. The h1 element is said to have the highest rank, the h6 element has the lowest rank, and two elements with the same name have equal rank.
head::The head element represents a collection of metadata for the Document.
html::The html element represents the root of an HTML document.\n\nAuthors are encouraged to specify a lang attribute on the root html element, giving the document's language. This aids speech synthesis tools to determine what pronunciations to use, translation tools to determine what rules to use, and so forth.\n\nThe manifest attribute gives the address of the document's application cache manifest, if there is one. If the attribute is present, the attribute's value must be a valid non-empty URL potentially surrounded by spaces.\n\nThe manifest attribute is part of the legacy "offline web applications" feature, which is in the process of being removed from the web platform. (This is a long process that takes many years.) Using the manifest attribute at this time is highly discouraged. Use service workers instead.\n\nThe manifest attribute only has an effect during the early stages of document load. Changing the attribute dynamically thus has no effect (and thus, no DOM API is provided for this attribute).
link::The link element allows authors to link their document to other resources.\n\nThe address of the link(s) is given by the href attribute. If the href attribute is present, then its value must be a valid non-empty URL potentially surrounded by spaces. One or both of the href or imagesrcset attributes must be present.\n\nIf both the href and imagesrcset attributes are absent, then the element does not define a link.\n\nThe crossorigin attribute is a CORS settings attribute. It is intended for use with external resource links.\n\nThe types of link indicated (the relationships) are given by the value of the rel attribute, which, if present, must have a value that is a unordered set of unique space-separated tokens. The allowed keywords and their meanings are defined in a later section. If the rel attribute is absent, has no keywords, or if none of the keywords used are allowed according to the definitions in this specification, then the element does not create any links.\n\nrel's supported tokens are the keywords defined in HTML link types which are allowed on link elements, impact the processing model, and are supported by the user agent. The possible supported tokens are alternate, dns-prefetch, icon, manifest, modulepreload, next, pingback, preconnect, prefetch, preload, prerender, search, and stylesheet. rel's supported tokens must only include the tokens from this list that the user agent implements the processing model for.\n\nTheoretically a user agent could support the processing model for the canonical keyword â€” if it were a search engine that executed JavaScript. But in practice that's quite unlikely. So in most cases, canonical ought not be included in rel's supported tokens.\n\nA link element must have either a rel attribute or an itemprop attribute, but not both.\n\nIf a link element has an itemprop attribute, or has a rel attribute that contains only keywords that are body-ok, then the element is said to be allowed in the body. This means that the element can be used where phrasing content is expected.
title::The title element represents the document's title or name. Authors should use titles that identify their documents even when they are used out of context, for example in a user's history or bookmarks, or in search results. The document's title is often different from its first heading, since the first heading does not have to stand alone when taken out of context.\n\nThere must be no more than one title element per document.
form::The form element represents a hyperlink that can be manipulated through a collection of form-associated elements, some of which can represent editable values that can be submitted to a server for processing.\n\nThe accept-charset attribute gives the character encodings that are to be used for the submission. If specified, the value must be an ASCII case-insensitive match for "UTF-8".\n\nThe name attribute represents the form's name within the forms collection. The value must not be the empty string, and the value must be unique amongst the form elements in the forms collection that it is in, if any.\n\nThe autocomplete attribute is an enumerated attribute. The attribute has two states. The on keyword maps to the on state, and the off keyword maps to the off state. The attribute may also be omitted. The missing value default and the invalid value default are the on state. The off state indicates that by default, form controls in the form will have their autofill field name set to "off"; the on state indicates that by default, form controls in the form will have their autofill field name set to "on".\n\nThe action, enctype, method, novalidate, and target attributes are attributes for form submission.\n\nThe rel attribute on form elements controls what kinds of links the elements create. The attribute's value must be a unordered set of unique space-separated tokens. The allowed keywords and their meanings are defined in an earlier section.\n\nrel's supported tokens are the keywords defined in HTML link types which are allowed on form elements, impact the processing model, and are supported by the user agent. The possible supported tokens are noreferrer, noopener, and opener. rel's supported tokens must only include the tokens from this list that the user agent implements the processing model for.
input-text::The input element represents a typed data field, usually with a form control to allow the user to edit the data.\n\nThe type attribute controls the data type (and associated control) of the element. It is an enumerated attribute. The following table lists the keywords and states for the attribute â€” the keywords in the left column map to the states in the cell in the second column on the same row as the keyword.
input-password::The input element represents a typed data field, usually with a form control to allow the user to edit the data.\n\nThe type attribute controls the data type (and associated control) of the element. It is an enumerated attribute. The following table lists the keywords and states for the attribute â€” the keywords in the left column map to the states in the cell in the second column on the same row as the keyword.
input-submit::The input element represents a typed data field, usually with a form control to allow the user to edit the data.\n\nThe type attribute controls the data type (and associated control) of the element. It is an enumerated attribute. The following table lists the keywords and states for the attribute â€” the keywords in the left column map to the states in the cell in the second column on the same row as the keyword.
p::The p element represents a paragraph.\n\nWhile paragraphs are usually represented in visual media by blocks of text that are physically separated from adjacent blocks through blank lines, a style sheet or user agent would be equally justified in presenting paragraph breaks in a different manner, for instance using inline pilcrows.