package de.mthoma.demowebapp.ui;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.HashMap;
import java.util.Map;
import java.util.stream.Stream;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.MethodSource;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
public class LoginPageUITest {
	
	private static final String WEB_DRIVER_FIRRFOX = "webdriver.gecko.driver";
	private static final String WEB_DRIVER_FIREFOX_LOCATION = "/home/mthoma/selenium/geckodriver";
	private static final String HTTP_ADDRESS = "https://some.super.webpage:8080";
	private static final WebDriver DRIVER = getDriver(); 
	
	@BeforeAll
	static void setUpBeforeClass() throws Exception {

		DRIVER.manage().window().maximize();
		DRIVER.get(HTTP_ADDRESS);
	}

	@AfterAll
	static void tearDownAfterClass() throws Exception {
		DRIVER.close();
	}

	@BeforeEach
	void setUp() throws Exception {
	}

	@AfterEach
	void tearDown() throws Exception {
	}
	
	// ##########################################################################################################
	// ##########################################################################################################
	// TEST CASES START
	// ##########################################################################################################
	// ##########################################################################################################	
	
   /**
    * Test if the tag with id==some_div_id has the tag name==div.
    */
	@Test
	public void testSomeDivIdTagName(){
	
		final WebElement tag = DRIVER.findElement(By.id("some_div_id"));
		assertEquals("div", tag.getTagName(),"wrong tag name");
	}
	
	 /**
     * Test if the tag with id==some_div_id has the parent with the id==body_id.
     */
    @Test
    public void testSomeDivIdParent(){

        final WebElement tag = DRIVER.findElement(By.id("some_div_id"));
        final WebElement parent = tag.findElement(By.xpath("./.."));
        assertEquals("body_id", parent.getAttribute("id"),"wrong parent");
    }
	
   /**
    * Test if the siblings of the tag with id==some_div_id.
    * expected preceding sibling id==some_pre_div_id
    * expected following sibling id==some_other_div_id
    * Hint if id==<empty> the corresponding sibling doesn't exists.
    */
	@ParameterizedTest
	@CsvSource({"some_pre_div_id,preceding-sibling::*[1]", "some_other_div_id,following-sibling::*[1]"})
	public void testSomeDivIdSibling(final String expectedSiblingId, final String xpath){
		final WebElement tag = DRIVER.findElement(By.id("some_div_id"));
		if(expectedSiblingId == null) {
			assertThrows(NoSuchElementException.class, () -> tag.findElement(By.xpath(xpath)));
		} else {
			final WebElement sibling = tag.findElement(By.xpath(xpath));
			assertEquals(expectedSiblingId, sibling.getAttribute("id"),"wrong sibling");
		}
	}
	
   /**
    * Test of the attributes for the tag with id==some_div_id
    */
	@ParameterizedTest
	@CsvSource({"class,some_class","value,some_value","placeholder,some_placeholder"})
	public void testSomeDivIdAttributes(final String attributeName, final String expectedValue){
		final WebElement tag = DRIVER.findElement(By.id("some_div_id"));
		assertEquals(expectedValue, tag.getAttribute(attributeName), "wrong " + attributeName);
	}
	
	/**
	 * Test of the css rules for the tag with id==some_div_id
	 */
	@ParameterizedTest
	@CsvSource({"border,fat","font,cool font","color,dark black"})
	public void testSomeDivIdCssRule(final String cssRuleName, final String expectedValue){
		final WebElement tag = DRIVER.findElement(By.id("some_div_id"));
		assertEquals(expectedValue, tag.getCssValue(cssRuleName), "wrong " + cssRuleName);
	}
	
	// ##########################################################################################################
	// ##########################################################################################################
	// TEST CASES END
	// ##########################################################################################################
	// ##########################################################################################################
	
	// ##########################################################################################################
	// ##########################################################################################################
	// NO TEST CASES
	// COMMON HELPER METHDOS
	// ##########################################################################################################
	// ##########################################################################################################	
		
	/*
	 * Returns the window width.
	 * @param driver {@link WebDriver}
	 * @return int
	 */
	private static long getWindowWidth(final WebDriver driver) {
		
		final JavascriptExecutor javascriptExecutor = (JavascriptExecutor) driver;
		
		long width = (long) javascriptExecutor.executeScript(
				"return window.innerWidth;");
		
		return width;
	}
	
	/*
	 * Returns the window height.
	 * @param driver {@link WebDriver}
	 * @return int
	 */
	private static long getWindowHeight(final WebDriver driver) {
		
		final JavascriptExecutor javascriptExecutor = (JavascriptExecutor) driver;
		
		long height = (long) javascriptExecutor.executeScript(
				"return window.innerHeight;");
		
		return height;
	}
	
	/*
	 * Returns the web driver.
	 * Before the driver is created it is checked if the web driver system property
	 * is set, and if not it'll set it.
	 */
	private static WebDriver getDriver() {
		
		setWebDriverSystemProperty();
		
		return new FirefoxDriver();
	}

	/*
	 * Sets the web driver system property if not already done.
	 */
	private static void setWebDriverSystemProperty() {
		
		if(!isWebDriverSystemPropertySet()) {
			System.setProperty(WEB_DRIVER_FIRRFOX, WEB_DRIVER_FIREFOX_LOCATION);
		}	
	}

	/*
	 * Return true if the web driver system property is set.
	 */
	private static boolean isWebDriverSystemPropertySet() {
		return WEB_DRIVER_FIREFOX_LOCATION.equals(System.getProperty(WEB_DRIVER_FIRRFOX));
	}
}
